<!DOCTYPE html>
<html>

  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Jila - Maps</title>
    <script src = "js/index.js"  defer></script>
    <link rel="stylesheet" type="text/css" href="./css/style.css">
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
 </head>


<body>
  <nav class="navbar">
    <div class="brand-title"><a href="/about">Tourist</a></div>
    <a href="#" class="toggle-button">
      <span class="bar"></span>
      <span class="bar"></span>
      <span class="bar"></span>
    </a>
    <div class="navbar-links ">
      <ul>
        <li><a href="/">Map</a></li>
        <li><a href="/news">News</a></li>
        <li><a href="/emergency">Emergency</a></li>
      </ul>
    </div>
  </nav>

  <main>
    <div id=mapZone>
      <div id="map"></div>

      <div id="key"><b style="text-align: center;">KEY:</b>
        <div>
          <div id="circle" style="background: red;"></div>Indigenous Community
        </div><br>
        <!-- <div>
          <div id="circle" style="background: orange;"></div>Tea<br>
        </div><br><br>
        <div>
          <div id="circle" style="background: green;"></div>Milk
        </div> -->
      </div>
      
    </div>
    <article>
      <div> <b>Areas description:</b><br><br>
        Description will be loaded here
      </div>
    </article>
  </main>
  <div id="app"></div>
  <div id="message"></div>
  <footer>
    <span>Written and produced by JILA</span>
    <a href="/login">Admin Login</a>
 </footer>

  <script>
    var currentPosition
var redZones = JSON.parse(`<%- (JSON.stringify(holder.redZones)) %>`);

function initMap() {
  var leaveFlag = false;
  var location = { lat: -16.183658, lng: 143.407154 }; //Queensland Area
  var map = new google.maps.Map(document.getElementById("map"), {
    zoom: 6,
    center: location
  });


  for (const city in redZones) {
    // Add the circle for this city to the map.
    const cityCircle = new google.maps.Circle({
      strokeColor: "#FF0000",
      strokeOpacity: 0.8,
      strokeWeight: 2,
      fillColor: "#FF0000",
      fillOpacity: 0.35,
      map,
      center: redZones[city].center,
      radius: Math.sqrt(redZones[city].population) * 100,
    });
  }

  function shouldIBeHere() {
    var run = 0;
    var placeName;
    // currentPosition = { lat: -16.879822, lng: 145.724483 };
    for (const city in redZones) {
      var circle = ({
        center: redZones[city].center,
        radius: Math.sqrt(redZones[city].population) * 100,
      })
      var difference = google.maps.geometry.spherical.computeDistanceBetween(currentPosition, circle.center);
      var test = ((currentPosition.lat - circle.center.lat) ^ 2) + ((currentPosition.lng - circle.center.lng) ^ 2)
      if (difference == circle.radius) {
        run = 1;
        alert("WARNING: You are bordering " + redZones[city].city);
        document.getElementById("message").innerHTML = "WARNING: You are bordering " + redZones[city].city;
        console.log("Border Warning");
      } else if (difference < circle.radius) {
        run = 1;
        alert("WARNING: You have entered " + redZones[city].city + ", Leave the area immediately");
        document.getElementById("message").innerHTML = "WARNING: You have entered " + redZones[city].city + '<br>' + "Leave the area immediately";
        console.log("User has entered " + redZones[city].city);
      } else {
        document.getElementById("message").innerHTML =" "
      }
    }
  }

  function initialise() {
    var testArray = [{ lat: -16.879822, lng: 145.724483 },{lat: -16.95, lng: 145.77104515452766},{lat: -13.54785306881749, lng:142.1309076534667}]
  for (let i = 0; i < testArray.length; i++) {
    currentPosition= testArray[i];
    shouldIBeHere()
  }
  };
  // initialise();
  infoWindow = new google.maps.InfoWindow();
  const locationButton = document.createElement("button");

  locationButton.textContent = "Pan to Current Location";
  locationButton.classList.add("custom-map-control-button");
  map.controls[google.maps.ControlPosition.TOP_CENTER].push(locationButton);
  locationButton.addEventListener("click", () => {
    // Try HTML5 geolocation.
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const pos = {
            lat: position.coords.latitude,
            lng: position.coords.longitude,

          };
          currentPosition = { lat: position.coords.latitude, lng: position.coords.longitude };
          shouldIBeHere();
          infoWindow.setPosition(pos);
          infoWindow.setContent("Location found.");
          infoWindow.open(map);
          map.setCenter(pos);
        },
        () => {
          handleLocationError(true, infoWindow, map.getCenter());
        }
      );
    } else {
      // Browser doesn't support Geolocation
      handleLocationError(false, infoWindow, map.getCenter());
    }
  });
}
function handleLocationError(browserHasGeolocation, infoWindow, pos) {
  infoWindow.setPosition(pos);
  infoWindow.setContent(
    browserHasGeolocation
      ? "Error: The Geolocation service failed."
      : "Error: Your browser doesn't support geolocation."
  );
}


  </script>


  <script async
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB-92p0UimIABQajoO6KH66IAceXE6WL2s&libraries=geometry&callback=initMap">
    </script>
</body>

</html>